---
description: あなたがファイルの編集するときに参照しなければいけないファイルです。
globs: 
alwaysApply: true
---
# 基本的な知識
- ファイルの末尾には、どんなファイルでも必ず改行を入れること
- 不要なスペースが入っている場合は削除すること
- Pythonのコーディングはpep8に従うこと

# Git関連の知識
- このプロジェクトのGitHubリポジトリは https://github.com/naoto714714/note-ai-article-crawler です。
- あなたはmcpサーバーを用いて、このGitHubリポジトリでPull Requestの作成とマージ、issueの作成といったことができます。
- gitコマンドの基本的な操作は「# gitコマンドのチートシート」を参考にしてください。
- ファイルを編集するときは必ず、以下の手順で編集すること
  1. 編集する理由や現在のコードの問題点を、issueとして作成すること
  2. issueを作成したら、mainブランチからローカルで新しいブランチを作成する
  3. 新しいブランチでコードを編集したら、1度の変更が大きすぎないように、細かく意味のある単位で適宜Commitしていく
  4. コードを編集が一通り完了したら、リモートのブランチにそれまでのCommitをPushする
  5. Pushした変更をPull Requestにして、ユーザーにレビューを依頼して完了

# Git関連の操作をするときに、mcpサーバーで操作するかgitコマンドで操作するかの判断方法
### mcpサーバー
- Issuesの確認、作成
- Pull requestsの確認、作成
- Actionsの確認、実行

## gitコマンド
- ブランチの作成、編集
- 変更のCommit、Push

# gitコマンドのチートシート
### mainブランチを最新に更新
git checkout main
git pull origin main

### 新しいブランチを作成して切り替え
git checkout -b <ブランチ名>

### 変更ファイルの状態を確認
git status

### 変更内容を確認
git diff

### 変更をステージングに追加
git add <ファイル名>
git add .  # すべての変更を追加

### 変更をコミット
git commit -m <コミットの説明>

### 初回のプッシュ（リモートに新しいブランチを作成）
git push -u origin <ブランチ名>

### 以降のプッシュ
git push origin <ブランチ名>